#! /bin/python
import datetime
import sys
import shutil
import os
from functools import partial
import re
import string

nom=datetime.datetime.today().strftime('%m%d-%H%M%S')
today=datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')
nom="tmp"+nom
file=(sys.argv[0])
file2=(os.path.basename(__file__))
# pour debug
# shutil.copyfile(file, nom)

version="1.10 b-20221111"

if "--version" in str(sys.argv) :
   print("\n:::",file2," version : ",version,"\n")
   quit()

if "--help" in str(sys.argv) :
   print("\nPRESENTATION GENERALE \n\n"
         "    Usage  financial [--help | --version] [OPTIONS] \n\n"
         "    Objet  le script", file2, "version", version, "calcule les montants des remboursements\n"
         "           périodiques d'un prêt et publie le tableau d'amortissement. Il se présente sous deux\n"
         "           versions : la version complète prend en compte l'inflation estimée et calcule les montants\n"
         "           actualisés des payments périodiques (intéret et capital) et des restes dûs ; elle calcule\n"
         "           ensuite le coût total effectif de l'opération. La  version simplifiée se rapproche d'une\n"
         "           calculette. Les deux versions permettent d'envoyer les résultats dans un fichier. \n\n"
         "DEFINITIONS \n\n"
         "    Present Value \n"
         "            montant du prêt (par ex. accordé par une banque). \n\n"
         "    Nombre de périodes \n"
         "            nombre de périodes de remboursement. Les durées de ces périodes sont égales. En version\n"
         "            simplifiée elles peuvent être quelconques, sous réserve que les taux d'intérêt périodiques\n"
         "            correspondent. En version complète les durées vont de l'année à la semaine, définies en\n"
         "            réponse à la question 'nature de la période'.\n\n"
         "    Nature de la période\n"
         "            par convention : semaine=52, mois=12, trim=4, semestres=2, année=1 \n\n"
         "    Taux d'intérêt périodique \n"
         "            taux d'intérêt par période. Il n'y a pas de cumul périodique des intérêts : à la manière\n"
         "            des banques, le taux périodique est le taux annuel divisé par le nombre de périodes.\n"
         "            S'exprime en nombre décimal en version simplifiée et en pourcentage annuel en version\n"
         "            complète.\n\n"
         "    Future value \n"
         "            montant éventuel à payer au préteur à l'échéance du prêt. Le taux d'intérêt est identique\n"
         "            à celui du prêt remboursé par PMT. \n\n"
         "    Taux d'inflation annuel estimé \n"
         "            en version complète seulement.\n\n"
         "    Affichage échéancier (O/N) \n"
         "            affiche, pour chaque période, le montant de PMT versé, sa partie intérêt, sa partie\n"
         "            remboursement du capital et le montant du capital restant dû. En version complète\n"
         "            affiche les mêmes données actualisées du taux de l'inflation. Affiche également le coût\n"
         "            total actualisé du prêt.\n\n"
         "    PMT     abréviation de 'Payment'. Montant à rembourser à chaque période. Les remboursements\n"
         "            sont supposés payés en fin de période. \n\n"
         "SYNTAXE     Present Value, Future Value, taux d'intérêt et taux d'inflation peuvent être saisis en\n"
         "            décimal (séparateur point ou virgule) ; nature de la période et nombre de périodes en\n"
         "            entier. Pas d'espace avant, après ou à l'intérieur des nombres. Le taux d'interêt et le\n"
         "            taux d'inflation peuvent être négatifs.\n\n"
         "OPTIONS \n\n"
         "    -s      version simplifiée.\n\n"
         "    -p      le résultat est envoyé dans un fichier intitulé 'financial.txt' avec vidage de ce fichier \n"
         "            s'il existe déjà.\n\n"
         "    -q      le résultat est ajouté à un fichier intitulé 'financial.txt' \n\n"
         "    -t      impression de toutes les lignes de l'échéancier. Par défaut ne sont imprimées que les 4 \n"
         "            premières et 4 dernières lignes.\n\n"
         "DIVERS\n\n"
         "    interprétation des résultats\n"
         "            l'échéancier affiche des sommes arrondies au centième. Il en résulte que la somme des\n"
         "            intérêts et du capital affichée peut différer du PMT de un centième. De même, des\n"
         "            différences de l'ordre du cent millième peuvent apparaître dans les totaux des échéanciers.\n"
         "            Ce ne sont pas des erreurs.\n\n"
         "    exécutabilité\n"
         "            ce script a été réalisé sous GNU bash, version 5.1.8(1)-release-(x86_64-redhat-linux-gnu)\n"
         "            en Python 3.10.7. Il ne suppose l'installation d'aucun module spécial.\n\n"
         "    bugs    merci de signaler bugs et suggestions à : paul at vidonne point fr.\n\n"
         "    licence\n"
         "            Copyright (c) 2022 Paul Vidonne. Ce script peut être librement exécuté,diffusé et\n"
         "            modifié dans les conditions de la 'Creative Commons Attribution-NonCommercial-ShareAlike\n"
         "            3.0 Unported License' (CC-BY-NC-SA) publiée par Creative Commons. Il est mis à disposition\n"
         "            tel quel, SANS AUCUNE GARANTIE de quelque nature que ce soit et auprès de qui que ce soit.\n"
         "            Plus d'informations sur la licence à <https://creativecommons.org/licenses/by-nc-sa/3.0/>,\n"
         "            texte intégral à  <https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode>.\n"
         "\nfinancial                                   ",version,"                                    ---\n")
   quit()

# vérification de la ligne de commande
cmd=(str(sys.argv[1:]))
args="['- ,spqt]"
for arg in args :
   cmd = cmd.replace(arg, '')
if not cmd == "" :
   print("\n::: Arguments non reconnus dans la ligne de commande", str(sys.argv[1:]), "- Abandon.\n")
   quit()

if "-p" in str(sys.argv) :
   if os.path.exists('financial.txt') :
      os.remove('financial.txt')
#------------------------------------------------fonctions----------------------------------------------------
if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
   def my_print(file_save, *args, **kwargs) :
       with open(file_save, "a") as f_obj:
           print(*args, **kwargs, file=f_obj)
       print(*args, **kwargs)
   #partial pour curryfier la fonction
   my_print = partial(my_print, "financial.txt")
else :
   def my_print(*args) :
       print(*args)
print()

if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
   def my_print_s(file_save, *args, **kwargs) :
       with open(file_save, "a") as f_obj:
           print(*args, **kwargs, file=f_obj)
       print(*args, **kwargs)
   #partial pour curryfier la fonction
   my_print_s = partial(my_print_s, "financial.txt")
else :
   def my_print_s(*args) :
       print(*args)

def print_lines() :
   my_print('%7s' % m, '%12s' % f"{pmt2:.2f}", '%12s' % f"{int:.2f}", '%12s' % f"{remb:.2f}",\
            '%15s' % f"{reste_n:.2f}", '%12s' % f"{pmt2/(1+tif)**(m+1):.2f}", '%12s' % f"{int/(1+tif)**(m+1):.2f}",\
            '%12s' % f"{remb/(1+tif)**(m+1):.2f}", '%15s' % f"{reste_n/(1+tif)**(m+1):.2f}")

def print_lines_s() :
   my_print_s('%7s' % m, '%15s' % f"{pmt2:.2f}", '%15s' % f"{int:.2f}", '%15s' % f"{remb:.2f}",\
              '%15s' % f"{reste_n:.2f}" )


def verif(question, reg) :
   global var
   var=input(question)
   var_format = re.compile(reg)
   var_is = re.match(var_format,var)
   while not var_is :
      print("::: Frappe",var,"incorrecte, recommencez")
      var=input(question)
      var_format = re.compile(reg)
      var_is = re.match(var_format,var)
   var = var.replace(",", ".")
   return var

#----------------------------------------main---------------------------------------------------------------
verif("::: Present Value : ", '^[0-9]+[\.,]?[0-9]*$')
pv=var
pv=float(pv)

if not "-s" in str(sys.argv) :
   verif("::: Nature de la période : semaine=52, mois=12, trim=4, semestres=2, année=1 : ",\
         '^(1$)|(2$)|(4$)|(12$)|(52$)')
   lit_period={"1" : "annuel", "2" : "semestriel", "4" : "trimestriel", "12" : "mensuel", "52" : "hebdomadaire"}
   nb_period=var

verif("::: Nombre de périodes : ", '^[1-9][0-9]*$')
n=var
n=float(n)

if not "-s" in str(sys.argv) :
   verif("::: Taux d'intéret annuel en % : ", '^\-?[0-9]+[\.,]?[0-9]*$')
   i=var
   i=float(i)
   ia=i
   i=i/(100*float(nb_period))
   print("::: Soit un taux", lit_period[nb_period], "de : ", i)
else :
   verif("::: Taux d'intéret périodique ex. 0.001525 : ", '^\-?[0-9]+[\.,]?[0-9]*$')
   i=var
   i=float(i)

verif("::: Future Value : ", '^[0-9]+[\.,]?[0-9]*$')
fv=var
fv=float(fv)

if i != 0 :
   pmt1=pv*(i*(1+i)**n)/((1+i)**n -1)
   pmt2=(pv-fv)*(i*(1+i)**n)/((1+i)**n -1)+i*fv
else :
   pmt1=pv/n
   pmt2=(pv-fv)/n

# version standard
print("::: PMT avec FV de", f"{fv:.0f}",": ", f"{pmt2:.2f}")

print("::: PMT sans FV : ", f"{pmt1:.2f}")

if not "-s" in str(sys.argv) :
   verif("::: Taux d'inflation annuel estimé en % : ", '^\-?[0-9]+[\.,]?[0-9]*$')
   tif=var
   tif=float(tif)
   tif=tif/100
   tif=tif/float(nb_period)

   if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
      msg="\n::: ===========================================================" + \
          "\n::: " + str(file2) + " -- version " + str(version) + " -- le " + str(today) + \
          "\n::: Present Value : " + str(f"{pv:.0f}") + \
          "\n::: Nature de la période : " + lit_period[nb_period] + \
          "\n::: Nombre de périodes : " + str(f"{n:.0f}") + \
          "\n::: Taux d'intérêt annuel : " + str(ia) +" %" + \
          "\n::: Soit un taux " + lit_period[nb_period] + " de : " + str(i) + \
          "\n::: Future value : " + str(f"{fv:.0f}") + \
          "\n::: PMT avec FV de " + str(f"{fv:.0f}") + " : " + str(f"{pmt2:.2f}") + \
          "\n::: PMT sans FV : " + str(f"{pmt1:.2f}") + \
          "\n::: Taux annuel d'inflation estimé : " + str(f"{tif*float(nb_period)*100:.2f}") +" %" + "\n"
      with open("financial.txt", "a") as sortie :
         sortie.write(msg)

   nul=(input("::: Affichage échéancier (O/N) ? "))
   if not nul in ("o", "O", "y", "Y", "0") :
      print("::: Entendu. Au revoir.")
      if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
         my_print("::: Les résultats ci-dessus figurent dans le fichier : financial.txt\n")
      print()
      quit()
   m=int(0)

   my_print('%7s' % "\nPériode", '%12s' % "PMT", '%12s' % "Intérêt", '%12s' % "Capital", '%15s' % "Reste dû",\
            '%12s' % "PMT", '%12s' % "Intérêt", '%12s' % "Capital", '%15s' % "Reste dû")
   my_print('%7s' % "", '%12s' % "Nominal", '%12s' % "Nominal", '%12s' % "Nominal", '%15s' % "Nominal",\
            '%12s' % "Actualisé", '%12s' % "Actualisé", '%12s' % "Actualisé",'%15s' % "Actualisé")
   tot_int=tot_cap=tot_pmt=reste=tot_pmt_a=tot_int_a=tot_cap_a=reste_a=0
   n=int(n)

   for m in range(n) :
     remb=(pmt2 - i*pv)*(1 + i)**m   # erreur corrigée : **(m-1)
     int=pmt2 - remb
     reste_n=pv-reste-remb
     if not "-t" in str(sys.argv) :
        if m < 3 or m > (n - 4) :
           print_lines()
     else :
        print_lines()
     tot_int=tot_int+int
     tot_int_a=tot_int_a+int/(1+tif)**(m+1)
     tot_cap=tot_cap+remb
     tot_cap_a=tot_cap_a+remb/(1+tif)**(m+1)
     tot_pmt=tot_pmt+pmt2
     tot_pmt_a=tot_pmt_a+pmt2/(1+tif)**(m+1)
     reste=reste+remb
     reste_a=reste_a+remb/(1+tif)**(m+1)
   my_print('%7s' % "Totaux", '%12s' % f"{tot_pmt:.2f}", '%12s' % f"{tot_int:.2f}", '%12s' % f"{tot_cap:.2f}", \
         '%28s' % f"{tot_pmt_a:.2f}", '%12s' % f"{tot_int_a:.2f}", '%12s' % f"{tot_cap_a:.2f}" )
   my_print("\n::: Coût total (remboursement capital et interêts) de", f"{pv:.0f}", "actualisé au taux annuel de ",\
         f"{tif*float(nb_period)*100:.2f}", "% =", f"{tot_pmt_a+reste_n/(1+tif)**(m+1):.2f}\n")

   if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
      my_print("::: Les résultats ci-dessus figurent dans le fichier : financial.txt\n")

# version simpliflée
if "-s" in str(sys.argv) :
   n=int(n)
   tot_int=tot_cap=tot_pmt=reste=0

   if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
      msg="\n::: ===========================================================" + \
          "\n::: " + str(file2) + " -- version " + str(version) + " -- le " + str(today) + \
          "\n::: Present Value : " + str(f"{pv:.0f}") + \
          "\n::: Nombre de périodes : " + str(f"{n:.0f}") + \
          "\n::: Taux d'intérêt : " + str(i) +  \
          "\n::: Future value : " + str(f"{fv:.0f}") + \
          "\n::: PMT avec FV de " + str(f"{fv:.0f}") + " : " + str(f"{pmt2:.2f}") + \
          "\n::: PMT sans FV : " + str(f"{pmt1:.2f}") + "\n"
      with open("financial.txt", "a") as sortie :
         sortie.write(msg)

   nul=(input("::: Affichage échéancier (O/N) ? "))
   if not nul in ("o", "O", "y", "Y", "0") :
      print("::: Entendu. Au revoir.")
      if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
         my_print("::: Les résultats ci-dessus figurent dans le fichier : financial.txt\n")
      print()
      quit()

   my_print_s('%7s' % "\nPériode", '%15s' % "PMT", '%15s' % "Intérêt", '%15s' % "Capital", '%15s' % "Reste dû")
   for m in range(n) :
     remb=(pmt2 - i*pv)*(1 + i)**m
     int=pmt2 - remb
     reste_n=pv-reste-remb
     if not "-t" in str(sys.argv) :
        if m < 3 or m > (n - 4) :
           print_lines_s()
     else :
        print_lines_s()
     tot_int=tot_int+int
     tot_cap=tot_cap+remb
     tot_pmt=tot_pmt+pmt2
     reste=reste+remb
   my_print_s('%7s' % "Totaux", '%15s' % f"{tot_pmt:.2f}", '%15s' % f"{tot_int:.2f}", '%15s' % f"{tot_cap:.2f}")

   if "-p" in str(sys.argv) or "-q" in str(sys.argv) :
      my_print("\n::: Les résultats ci-dessus figurent dans le fichier : financial.txt\n")

quit()

