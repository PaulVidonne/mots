#!/bin/bash

# file="tmp$(date +%m%d-%H%M%S)"
# cp "$0" "$file"
# date

# date est gregorien
# cal est julien jusqu'au  2 sept. 1752, gregorien ensuite
# cal --reforn=julian est entièrement julien
# cal --reform=gregorian est entièrement grégorien
# Calcul de la date de pâques méthode Butcher-Meeus (grégorienne) Delambre (julienne)

version="1.20 b-20230111"
origin=dow

usage()
{
   echo -e "::: Usage : $(basename $0) [--help | --version] [date | jour_julien] [OPTIONS]"
}

echo

if [[ $@ == *--version* ]] ; then
   echo -e "::: $(basename $0) version : $version\n"
   exit
fi

if [[ $@ == *--help* ]] ; then
cat << EOF
PRESENTATION GENERALE

   Usage  $(basename $0) [--help | --version] [date | jour_julien] [OPTIONS]

   Objet  le script $(basename $0) version $version établit la correspondance entre les dates
          du calendrier grégorien, celles du calendrier julien et celles de leurs numéros en
          "jours juliens" inventés par Joseph Juste Scaliger. La saisie de l'une de ces trois
          données affiche les deux autres ainsi que le jour de la semaine. Par défaut de saisie
          de date ou de jour julien, la date retenue est celle du jour. Une option affiche le
          jour de Pâques de l'année.

SYNTAXE
          les dates calendaires peuvent être saisies sous la forme 'JJ-MM-AAAA' ou 'JJ/MM/AAAA'
          et les numéros de jours juliens "XXXXXXXXX" avec ou sans espaces. Les années
          antérieures à l'an 1 sont désignées par le signe "-" après l'année, de type :
          'JJ/MM/AAAA-'.

OPTIONS

   -j     la date calendaire saisie est une date du calendrier julien. Par défaut, la date
          saisie est une date du calendrier grégorien.

   -p     la date de Pâques de l'année est affichée.

  -en     les dates sont affichées en anglais

DIVERS

   remarques
          l'an '0' en jours juliens est le 01/01/4712 av. J.-C. du calendrier julien, soit le
          24/11/4073 av. J.-C. du calendrier grégorien.

          Les années sont des années entières qui commencent à 12 heures.

          Les calendriers sont proleptiques. On considère que l'année antérieure à l'an 1
          est l'année '0' et non l'année '-1'. Ainsi la date de l'assassinat de Jules César
          en 44 av. J.-C. doit être ici saisie '15/03/0043-'.

          Le script accepte tout jour julien compris entre 0 et 5 373 557 et toute date
          comprise entre l'an 4712 av. J.-C. et l'an 9999 apr. J.C.

          La date de Pâques, arrêtée par le concile de Nicée en 325, ne s'affiche que pour
          les années postérieures à cette année.

   exécutabilité
          ce script a été réalisé sous GNU bash, version 5.1.8(1)-release-(x86_64-redhat-
          linux-gnu). Il ne suppose l'installation d'aucun module particulier.

   bugs   merci de signaler bugs et suggestions à : paul at vidonne point fr

   licence
          Copyright (c) $(date +%Y) Paul Vidonne. Ce script peut être librement exécuté,
          diffusé et modifié dans les conditions de la 'Creative Commons Attribution-
          NonCommercial-ShareAlike 3.0 Unported License' (CC-BY-NC-SA) publiée par Creative
          Commons. Il est mis à disposition "tel quel", SANS AUCUNE GARANTIE de quelque
          nature que ce soit et auprès de qui que ce soit. Plus d'informations (en anglais)
          sur la licence à <https://creativecommons.org/licenses/by-nc-sa/3.0/>, texte
          intégral à  <https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode>.

$(basename $0)/$origin                  version : $version                               ----
EOF
echo
exit
fi

#----------------------------------------déclarations----------------------------------------
declare -A tab_jour_en
tab_jour_en=( [0]="Monday" [1]="Tuesday" [2]="Wednesday" [3]="Thursday" [4]="Friday" [5]="Saturday" \
            [6]="Sunday" )
declare -A tab_mois_en
tab_mois_en=( [1]="January" [2]="February" [3]="March" [4]="April" [5]="May" [6]="June" [7]="July" \
            [8]="August" [9]="September" [10]="October" [11]="November" [12]="December" )
declare -A tab_jour_fr
tab_jour_fr=( [0]="lundi" [1]="mardi" [2]="mercredi" [3]="jeudi" [4]="vendredi" [5]="samedi" \
            [6]="dimanche" )
declare -A tab_mois_fr
tab_mois_fr=( [1]="janvier" [2]="février" [3]="mars" [4]="avril" [5]="mai" [6]="juin" [7]="juillet" \
            [8]="août" [9]="septembre" [10]="octobre" [11]="novembre" [12]="décembre" )
#--------------------------------------fonction entree----------------------------------------
function entree()
{
# on teste si la ligne cmd contient un jdn
jdn=$( sed -E -e 's/\ |-en|-j|-p//g' <<< $@ )
if ! [[ -z $jdn ]] && [[ $jdn =~ ^-?[0-9]*$ ]] ; then
   if ([ $jdn -gt 5373557 ] || [ $jdn -lt 0 ]) ; then
      usage
      echo -e "::: Jour julien '$jdn' hors plage admise (0-5373557). Abandon\n"
      exit
   fi
   jdntojul
   jdntogreg
else
   # on teste si la ligne de commande contient des détritus
   if ! [ -z $(echo $(sed -E -e 's/[0-9]|\/|-|j|e|n|p//g' <<< $@ )) ] ; then
      usage
      echo -E -e "::: Contenu non reconnu dans la ligne de commande '$(basename $0) $@'. Abandon.\n"
      exit
   fi
   # on teste l'exixtence et la validité de la forme date
   jour=$(sed -E 's/ *-(j|en|p) *//g' <<< $@ )
   if [[ -z $jour ]] ; then
      jour=$(date "+%d/%m/%Y")
   fi
   if ! ( [[ $jour =~ ^[0-9]{2}[/-][0-9]{2}[/-][0-9]{4}[-]?$ ]] ) ; then
      usage
      echo -e "::: Argument '$jour' invalide. Le format des dates est 'JJ/MM/AAAA[-]'."
      echo -e "::: Le format des jours juliens est 'XXXXXXX', de 0 à 5373557. Abandon\n"
     exit
   fi
   y=${jour:6:4}
   m=${jour:3:2}
   d=${jour:0:2}
   if [[ $jour =~ ^.*[0-9]{4}[-]{1}$ ]] ; then
      y=$( sed -E -e 's/^0*()/\1/g' <<<$y )
      if [[ $y -gt 4712 ]] ; then
         usage
         echo -e "::: L'année '$y-' n'est pas admise car antérieure à 4712 av. J.-C. Abandon\n"
         exit
      fi
      y=-$y
   fi
   if [[ $@ == *-j* ]] ; then
      jdtojdn
   else
      gdtojdn
   fi
   jdntogreg
   jdntojul
fi
}
#-------------------------------------fonction jdtojdn---------------------------------------
function jdtojdn()
{
if [ ${d:0:1} == 0 ] ; then
   dd=${d:1:1}
else
   dd=$d
fi
if [ $y -gt 0 ] ; then
   cal --reform=julian $m $y 2>/dev/null | grep -E -e "(^| )$dd" 1>/dev/null
   if ! [[ $? == 0 ]] ; then
      usage
      echo -e "::: La date '$jour' ne figure pas au calendrier julien. Abandon\n"
      exit
   fi
else
     if [ $d -gt 31 ] || [ $m -gt 12 ] ; then
        usage
        echo -e "::: Numéro du jour '$d' ou du mois '$m' impossible. Abandon\n"
        exit
     elif ([ $d -gt 29 ] && [ $m -eq 2 ]) || ([ $m -eq 2 ] && [ $d -eq 29 ] && [ $(($y%4)) -ne 0 ]); then
        usage
        echo -e "::: La date '$jour' ne figure pas au calendrier julien proleptique. Abandon\n"
        exit
    fi
fi

a=$(echo "(367*$y)" | bc )
b=$(echo "( (7*($y+5001+($m-9)/7))/4)" | bc )
c=$(echo "( (275*$m)/9)" | bc )
d=$(echo "($d + 1729777)" | bc )
let jdn=$a-$b+$c+$d
}
#-------------------------------------fonction gdtojdn---------------------------------------
function gdtojdn()
{
   if ! ( [[ $(date -d "${jour:6:4}-${jour:3:2}-${jour:0:2}" >/dev/null 2>&1 ; echo $?) == 0 ]] ) ; then
      usage
      if [ $y -gt 1582 ]; then
         echo -e "::: La date '$jour' ne figure pas au calendrier grégorien. Abandon\n"
      else
         echo -e "::: La date '$jour' ne figure pas au calendrier grégorien proleptique. Abandon\n"
      fi
   exit
   fi

a=$(echo "(1461 * ($y + 4800 + ($m - 14)/12 )/4)" | bc )
b=$(echo "(367 * ($m - 2 -12 * (($m - 14)/12)))/12" | bc )
c=$(echo "(3 * (($y + 4900 + ($m - 14)/12)/100))/4 " | bc )
d=$(echo "($d - 32075)" | bc )
let jdn=$a+$b-$c+$d
}
#-------------------------------------fonction jdntogreg-------------------------------------
function jdntogreg()
{
l=$(echo "($jdn + 68569)" | bc)
n=$(echo "(4*$l/146097)" | bc)
l=$(echo "($l - (146097*$n +3)/4)" | bc)
i=$(echo "(4000*($l+1)/1461001)" | bc)
l=$(echo "($l - 1461*$i/4 + 31)" | bc)
j=$(echo "(80*$l/2447)" | bc)
k=$(echo "($l - 2447*$j/80)" | bc)
l=$(echo "($j/11)" | bc)
j=$(echo "($j+2 - 12*$l)" | bc)
i=$(echo "(100*($n - 49) + $i + $l)" | bc)
yg=$i
mg=$j
dg=$k
y=$i # pour paques
}
#-------------------------------------fonction jdntojul--------------------------------------
function jdntojul()
{
j=$(echo "($jdn + 1402)" | bc)
k=$(echo "(($j - 1)/1461)" | bc)
l=$(echo "($j - (1461*$k))" | bc)
n=$(echo "(($l - 1)/365 - ($l/1461))" | bc)
i=$(echo "($l - (365*$n) + 30)" | bc)
j=$(echo "(80*$i/2447)" | bc)
m=$(echo "($i - 2447*$j/80)" | bc)
i=$(echo "($j/11)" | bc)
o=$(echo "($j+2 - 12*$i)" | bc)
p=$(echo "(($k*4) + $n + $i -4716)" | bc)
yj=$p
mj=$o
dj=$m
}
#-------------------------------------fonction paques---------------------------------------
function paques()
{
if [ $y -lt 326 ] ; then
   if [[ $@ == *en* ]] ; then
      echo -e "::: The date of Easter will not be fixed until 325\n"
   else
      echo -e "::: La date de Pâques ne sera arrêtée qu'en 325\n"
   fi
exit
fi
if ! [[ $@ == *-j* ]] ; then
   n=$(( $y%19 ))
   u=$(( $y%100 ))
   c=$(( $y/100 ))
   t=$(( $c%4 ))
   s=$(( $c/4 ))
   p=$(( ($c +8)/25 ))
   q=$(( ($c -$p +1)/3 ))
   e=$(( (19*$n + $c -$s -$q + 15)%30 ))
   d=$(( $u%4 ))
   b=$(( $u/4 ))
   l=$(( (2*$t + 2*$b -$e -$d +32)%7 ))
   h=$(( ($n + 11*$e +22*$l)/451 ))
   j=$(( ($e + $l -7*$h + 114)%31 ))
   m=$(( ($e + $l -7*$h + 114)/31 ))
   if [[ $@ == *en* ]] ; then
      echo -e "::: Gregorian date of Easter : Sunday," ${tab_mois_en[$m]} $(( $j+1 )), $y
   else
      echo -e "::: Pâques calendrier grégorien : dimanche" $(( $j+1 )) ${tab_mois_fr[$m]} $y
   fi
else
   a=$(( $y%19 ))
   b=$(( $y%7 ))
   c=$(( $y%4 ))
   d=$(( (19*$a + 15)%30 ))
   e=$(( (2*$c + 4*$b -$d +34)%7 ))
   g=$(( ($d + $e +114 )%31 ))
   f=$(( ($d + $e +114 )/31 ))
   if [[ $@ == *en* ]] ; then
      echo -e "::: Julian date of Easter : Sunday," ${tab_mois_en[$f]} $(( $g+1 )), $y
   else
      echo -e "::: Pâques calendrier julien : dimanche" $(( $g+1 )) ${tab_mois_fr[$f]} $y
   fi
fi
}
#-------------------------------------fonction sortie----------------------------------------
function sortie()
{
if [[ $@ == *en* ]] ; then
   echo -e "::: Command : "$(basename $0) $@
   # autre solution : rendre ${#jdn}%3 == 0 alors $(sed -E -e 's/(.{3})/ \1/g' <<< $jdn)
   echo "::: Julian day number : "$( sed -E -e 's/(.{3}?)(.{3}?)(.{3}?)$/ \1 \2 \3/g' <<< $jdn)
   echo "::: Julian calendar date : "${tab_jour_en[$(( $jdn%7 ))]}, ${tab_mois_en[$mj]} $dj, $yj
   echo "::: Gregorian calendar date : "${tab_jour_en[$(( $jdn%7 ))]}, ${tab_mois_en[$mg]} $dg, $yg
else
   echo -e "::: Commande : "$(basename $0) $@
   echo "::: Numéro du jour julien : "$( sed -E -e 's/(.{3}?)(.{3}?)(.{3}?)$/ \1 \2 \3/g' <<< $jdn)
   echo "::: Date calendrier julien : "${tab_jour_fr[$(( $jdn%7 ))]} $dj ${tab_mois_fr[$mj]} $yj
   echo "::: Date calendier grégorien : "${tab_jour_fr[$(( $jdn%7 ))]} $dg ${tab_mois_fr[$mg]} $yg
fi
if [[ $@ == *-p* ]] ; then
   paques $@
fi
echo
}
#------------------------------------------main----------------------------------------------

entree $@
sortie $@

